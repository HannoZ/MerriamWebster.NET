@using MerriamWebster.NET.Results
@model SearchModel

@if (Model?.Result != null)
{
    <div class="row">&nbsp;</div>
    <button type="button" class="btn btn-info" data-bs-toggle="modal" data-bs-target="#raw-response">Raw response</button>

    <div class="modal fade" id="raw-response" tabindex="-1" aria-hidden="true">
        <div class="modal-dialog modal-xl">
            <div class="modal-content">
                <div class="modal-header">
                    <h1 class="modal-title fs-5" id="exampleModalLabel">Raw response</h1>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <pre> <code id="raw-response-json">@Html.Raw(Model.Result.RawResponse)</code></pre>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                </div>
            </div>
        </div>
    </div>                                                                         

    @* separate actual results and related results -> move logic to library*@
    int index = 0;
    List<Entry> validEntries = new List<Entry>();
    List<Entry> relatedEntries = new List<Entry>();
    foreach (var entry in Model.Result.Entries)
    {
        if (entry.Headword.Text?.Equals(Model.SearchTerm, StringComparison.OrdinalIgnoreCase) == true
            || (entry.AlternateHeadwords.HasValue() && entry.AlternateHeadwords.Any(hw => hw.Text?.Equals(Model.SearchTerm, StringComparison.OrdinalIgnoreCase) == true)))
        {
            validEntries.Add(entry);
            continue;
        }
        else
        {
            var colonIndex = entry.Metadata.Id.IndexOf(':');
            if (colonIndex != -1)
            {
                if (entry.Metadata.Id[..colonIndex].Equals(Model.SearchTerm, StringComparison.OrdinalIgnoreCase))
                {
                    validEntries.Add(entry);
                    continue;
                }
            }
            else
            {
                if (entry.Metadata.Id.Equals(Model.SearchTerm, StringComparison.OrdinalIgnoreCase))
                {
                    validEntries.Add(entry);
                    continue;
                }
            }
        }

        relatedEntries.Add(entry);
    }
    int total = validEntries.Count;
    foreach (var result in validEntries)
    {
        index++;
        <div class="mw-entry-header">
            <h1>@result.Headword.Text</h1> <span class="mw-fl">@result.FunctionalLabel</span> 
            @if (total > 1)
            {
                <span>@index of @total</span>
            }
            @if (result.Headword.Pronunciations != null  )
            {
                <partial name="_pronunciation" model="result.Headword.Pronunciations" />
            }
        </div>

        <partial name="_Labels" model="result.GeneralLabels" />
        <partial name="_Labels" model="result.SubjectStatusLabels" />
        
        <div class="clear"></div>
        @*Definitions*@
        <h2>Definitions</h2>
        foreach (var definition in result.Definitions)
        {
            <partial name="_definition" model="definition"/>
        }

        @* uros*@
        if (result.UndefinedRunOns.HasValue())
        {
            foreach (var uro in result.UndefinedRunOns)
            {
                <div class="mw-entry-header">

                    <h2>@uro.EntryWord</h2> <span class="mw-fl">@uro.FunctionalLabel</span>
                    @if (uro.Pronunciations != null)
                    {
                        <partial name="_pronunciation" model="uro.Pronunciations" />
                    }
                </div>
                @if (uro.RunOnTexts.HasValue())
                {
                    foreach (var runOnText in uro.RunOnTexts)
                    {
                        <partial name="_definingText" model="runOnText"/>
                    }
                }
            }
        }

        @* dros *@
        if (result.DefinedRunOns.HasValue())
        {
            foreach (var dro in result.DefinedRunOns)
            {
                <div class="mw-entry-header">

                    <h2>@dro.Phrase</h2> <span class="mw-fl">@dro.FunctionalLabel</span>
                    @if (dro.Pronunciations != null)
                    {
                        <partial name="_pronunciation" model="dro.Pronunciations"/>
                    }
                </div>

                @foreach (var definition in dro.Definitions)
                {
                    <partial name="_definition" model="definition"/>
                }
            }
        }

        @*Etymology*@
        if (result.Etymology != null)
        {
            <h2>Etymology</h2>
            <p>@Html.Raw(result.Etymology.Text.HtmlText)</p>
            if (result.Etymology.Notes.HasValue())
            {
                foreach (var etymologyNote in result.Etymology.Notes)
                {
                    <p>@Html.Raw(etymologyNote.Text.HtmlText)</p>
                }
            }
        }

        @*first known use*@
        if (result.Date != null)
        {
            <h2>First known use</h2>
            <div>@Html.Raw(result.Date.HtmlText)</div>
        }
    }

    @* show additional entries *@
    if (relatedEntries.Any())
    {
        <hr/>
        <h2>Related to @Model.SearchTerm: </h2>
        <i>@string.Join(',', relatedEntries.Select(e => e.Metadata.Id));</i>
    }

    @* no results*@
    if (!Model.Result.Entries.Any())
    {
        <h2>No results, check raw response</h2>
    }


}

